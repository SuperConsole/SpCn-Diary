{"componentChunkName":"component---src-templates-blog-post-js","path":"/190608/","result":{"data":{"site":{"siteMetadata":{"title":"SpXn-Blog","author":"_spxn"}},"markdownRemark":{"id":"f61835ef-a912-54d5-b8a7-27a5384de565","excerpt":"何気なくインターネットからファイルをダウンロードしてファイルの正当性を疑うこともなくそのままインストールして…\nでもセキュリティリテラシーの観点からするとよろしくないのでハッシュによる検証を癖つけるために記事にしました。 方法(kali-linux-2019.2-amd64.isoの例):…","html":"<p>　何気なくインターネットからファイルをダウンロードしてファイルの正当性を疑うこともなくそのままインストールして…\nでもセキュリティリテラシーの観点からするとよろしくないのでハッシュによる検証を癖つけるために記事にしました。<br>\n方法(kali-linux-2019.2-amd64.isoの例):  </p>\n<p>　1. 公式サイトから検証対象の.isoファイル(kali-linux-2019.2-amd64.iso)をダウンロードする  </p>\n<p>　2. OpenSSLを使ってハッシュ(今回はサイトのアルゴリズムにしたがってsha256)を以下のコマンドで算出(パイプで渡すのは個人的な好み)<br>\n$cat ./kali-linux-2019.2-amd64.iso | openssl sha256  </p>\n<p>　3. 出力されたハッシュ値とサイト上にあるSHA256Sumの値が一致しているか確かめる<br>\n>67574ee0039eaf4043a237e7c4b0…(例におけるハッシュ値)</p>\n<p>　4. 同じであれば正当性が確立, 異なればハッシュのアルゴリズムが同じか見直すか再ダウンロードを行う</p>\n<p>　簡単にできますね。しかし正当性の検証は大事なことです。なので忘れずにパソコンライフを送りたいと思います。  </p>\n<p>余談:<br>\nちなみに今日はデジタル署名とか認証まわりも学習していて、ネットサーフィンしてたら本物の”オレオレ証明書”のサイトを見つけました。でもChromeがちゃんと警告出してくれたのですぐに気づきました。詳細で確認するとルート証明書があからさまに怪しいドメインで面白かったです。以上。おわり。</p>","frontmatter":{"title":"ハッシュによるファイルの正当性検証","date":"June 08, 2019"}}},"pageContext":{"slug":"/190608/","previous":{"fields":{"slug":"/190410/"},"frontmatter":{"title":"Metasploit+docker(+nmap)で試すHeartbleed"}},"next":{"fields":{"slug":"/190614/"},"frontmatter":{"title":"防衛のためのTorネットワーク"}}}}}